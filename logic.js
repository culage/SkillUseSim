// Generated by CoffeeScript 1.10.0
var App, EventDispatcher, LastElementKeeper, Mons, MonsSwapper, MonsView, Team, mixin;

mixin = function(o1, o2) {
  var key, results;
  results = [];
  for (key in o2.prototype) {
    results.push(o1.prototype[key] = o2.prototype[key]);
  }
  return results;
};

EventDispatcher = (function() {
  function EventDispatcher() {}

  EventDispatcher.prototype.addEventListener = function(type, obj) {
    if (!this.__ed_listeners) {
      this.__ed_listeners = {};
    }
    if (!this.__ed_listeners[type]) {
      this.__ed_listeners[type] = [];
    }
    return this.__ed_listeners[type].push(obj);
  };

  EventDispatcher.prototype.dispatchEvent = function(e) {
    var j, len, listener, ref, results;
    if (!this.__ed_listeners[e.type]) {
      return;
    }
    if (!e.target) {
      e.target = this;
    }
    ref = this.__ed_listeners[e.type];
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      listener = ref[j];
      if (typeof listener === "object") {
        results.push(listener[e.type].call(listener, e));
      } else {
        results.push(listener(e));
      }
    }
    return results;
  };

  return EventDispatcher;

})();

App = (function() {
  function App() {
    this.TEAM_MAX = 5;
    this.init();
  }

  App.prototype.init = function() {
    this.initMonsSwap();
    return this.initSkillUse();
  };

  App.prototype.initMonsSwap = function() {
    var i, j, ref;
    this.swapper = new MonsSwapper();
    this.lastElement = new LastElementKeeper();
    for (i = j = 0, ref = this.TEAM_MAX; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      this.swapper.addMonsElement(["txtSt" + i, "txtHe" + i, "txtSp" + i]);
      this.lastElement.addElement(["txtSt" + i, "txtHe" + i, "txtSp" + i]);
    }
    document.getElementById("btnSwapL").onclick = (function(_this) {
      return function() {
        return _this.swapper.swapLeft(_this.lastElement.get());
      };
    })(this);
    return document.getElementById("btnSwapR").onclick = (function(_this) {
      return function() {
        return _this.swapper.swapRight(_this.lastElement.get());
      };
    })(this);
  };

  App.prototype.initSkillUse = function() {
    var haste, i, j, max, mons, preTurn, ref;
    this.team = new Team();
    for (i = j = 0, ref = this.TEAM_MAX; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      max = document.getElementById("txtSt" + i).value;
      haste = document.getElementById("txtHe" + i).value;
      preTurn = document.getElementById("txtSp" + i).value;
      mons = new Mons(max, haste, preTurn);
      mons.addViewer(new MonsView("btnMons" + i));
      document.getElementById("btnMons" + i).onclick = this.createClickEventListener(mons);
      this.team.add(mons);
    }
    this.team.preCharge();
    document.getElementById("btnInit").onclick = (function(_this) {
      return function() {
        return _this.init();
      };
    })(this);
    return document.getElementById("btnNext").onclick = (function(_this) {
      return function() {
        return _this.next();
      };
    })(this);
  };

  App.prototype.createClickEventListener = function(mons) {
    return function() {
      return mons.invoke();
    };
  };

  App.prototype.next = function() {
    return this.team.decTurn(1);
  };

  return App;

})();

Team = (function() {
  function Team() {
    this.list = [];
  }

  Team.prototype.add = function(mons) {
    this.list.push(mons);
    return mons.setTeam(this);
  };

  Team.prototype.preCharge = function() {
    var j, len, mons, ref, results;
    ref = this.list;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      mons = ref[j];
      results.push(mons.preCharge());
    }
    return results;
  };

  Team.prototype.decTurn = function(dec, expect) {
    var j, len, mons, ref, results;
    ref = this.list;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      mons = ref[j];
      if (mons !== expect) {
        results.push(mons.decTurn(dec));
      }
    }
    return results;
  };

  return Team;

})();

Mons = (function() {
  mixin(Mons, EventDispatcher);

  function Mons(max1, haste1, preTurn1) {
    this.max = max1;
    this.haste = haste1;
    this.preTurn = preTurn1;
    this.team = null;
    this.turn = this.max;
  }

  Mons.prototype.setTeam = function(team) {
    return this.team = team;
  };

  Mons.prototype.decTurn = function(dec) {
    this.turn -= dec;
    if (this.turn < 0) {
      this.turn = 0;
    }
    return this.onUpdateTurn();
  };

  Mons.prototype.preCharge = function() {
    return this.team.decTurn(this.preTurn);
  };

  Mons.prototype.invoke = function() {
    if (this.turn > 0) {
      return;
    }
    this.turn = this.max;
    this.onUpdateTurn();
    if (this.haste > 0) {
      return this.team.decTurn(this.haste, this);
    }
  };

  Mons.prototype.addViewer = function(viewer) {
    this.addEventListener("onUpdateTurn", viewer);
    return this.onUpdateTurn();
  };

  Mons.prototype.onUpdateTurn = function() {
    return this.dispatchEvent({
      type: "onUpdateTurn",
      turn: this.turn
    });
  };

  return Mons;

})();

MonsView = (function() {
  function MonsView(eleId) {
    this.viewElement = document.getElementById(eleId);
  }

  MonsView.prototype.onUpdateTurn = function(e) {
    this.viewElement.value = e.turn;
    return this.viewElement.disabled = e.turn !== 0;
  };

  return MonsView;

})();

MonsSwapper = (function() {
  function MonsSwapper() {
    this.list = [];
  }

  MonsSwapper.prototype.addMonsElement = function(itemsId) {
    return this.list.push(itemsId.map((function(_this) {
      return function(id) {
        return document.getElementById(id);
      };
    })(this)));
  };

  MonsSwapper.prototype.swapLeft = function(activeElement) {
    return this.swapItem(activeElement, -1);
  };

  MonsSwapper.prototype.swapRight = function(activeElement) {
    return this.swapItem(activeElement, +1);
  };

  MonsSwapper.prototype.swapItem = function(activeElement, plus) {
    var itemsIndex, swapItemsIndex;
    itemsIndex = this.list.findIndex((function(_this) {
      return function(items) {
        return items.some(function(el) {
          return el === activeElement;
        });
      };
    })(this));
    if (itemsIndex === -1) {
      return;
    }
    swapItemsIndex = itemsIndex + plus;
    if (swapItemsIndex < 0 || this.list.length <= swapItemsIndex) {
      return;
    }
    this.swap(this.list[itemsIndex], this.list[swapItemsIndex]);
    return this.list[swapItemsIndex][0].focus();
  };

  MonsSwapper.prototype.swap = function(items1, items2) {
    var el, i, j, len, results, swapValue;
    results = [];
    for (i = j = 0, len = items1.length; j < len; i = ++j) {
      el = items1[i];
      swapValue = items1[i].value;
      items1[i].value = items2[i].value;
      results.push(items2[i].value = swapValue);
    }
    return results;
  };

  return MonsSwapper;

})();

LastElementKeeper = (function() {
  function LastElementKeeper() {
    this.lastElement = null;
  }

  LastElementKeeper.prototype.addElement = function(itemsId) {
    var el, j, len, ref, results;
    ref = itemsId.map((function(_this) {
      return function(id) {
        return document.getElementById(id);
      };
    })(this));
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      results.push(el.addEventListener("focus", (function(_this) {
        return function(e) {
          return _this.lastElement = e.target;
        };
      })(this)));
    }
    return results;
  };

  LastElementKeeper.prototype.get = function() {
    return this.lastElement;
  };

  return LastElementKeeper;

})();

window.onload = function() {
  var app;
  return app = new App();
};

//# sourceMappingURL=logic.js.map
